generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  COUNSELOR
  USER
}

enum UserStatus {
  STUDENT
  EMPLOYED
}

enum ChatStatus {
  ACTIVE
  CLOSED
}

enum NotificationType {
  KYC_VERIFIED
  ACCOUNT_VERIFIED
  MESSAGE
  SESSION_SCHEDULING
  REFERRAL
  ACTIVITY_PROGRESS
  SECURITY
}

enum SessionType {
  INITIAL
  FOLLOW_UP
  CRISIS
  ASSESSMENT
}

enum ReminderTiming {
  NONE
  MIN_15
  HOUR_1
  DAY_1
  DAY_2
}

enum SessionStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

enum LocationType {
  IN_PERSON
  VIDEO_CALL
  PHONE_CALL
}

model User {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  middleName          String?
  suffix              String?
  email               String?               @unique
  password            String?
  profilePic          String?
  isTakeSurvey        Boolean              @default(false)
  role                Role                 @default(USER)
  isAccountVerified   Boolean              @default(false)
  otpExpiresAt        DateTime?
  otpCode             String?
  profile             UserProfile?
  responses           UserResponse[]       @relation("UserToResponses")
  counselorInfo       CounselorProfile?
  // google
  googleId         String?   @unique

  // Chat relations
  chatSessionsAsUser      ChatSession[]    @relation("UserChatSessions")
  chatSessionsAsCounselor ChatSession[]    @relation("CounselorChatSessions")
  chatMessagesSent        ChatMessage[]    @relation("UserMessages")

  // motif
  notifications             Notification[]       @relation("UserNotifications")

  // session scheduling
  sessionSchedulesAsUser      SessionSchedule[] @relation("UserSchedules")
  sessionSchedulesAsCounselor SessionSchedule[] @relation("CounselorSchedules")

  // awareness campaigns
  campaigns   AwarenessCampaign[]   @relation("CreatedCampaigns") //moderator
  comments    Comment[]
  feedbacks   Feedback[] 

  // referral
  referredsAsUser        Referral[] @relation("UserReferral")
  referralsAsCounselor   Referral[] @relation("CounselorReferral") 
  referralsAsReferrer    Referral[] @relation("ReferrerReferral")

  // content/courses
  contentsUploaded       Content[]  @relation("UploadedContents")
  ratings          ContentRating[] @relation("UserRatings")
  // tlc
  guidedTLCPlans  GuidedTLCPlan[]
  
  // Peer Support
  InitiatedPeerSupports PeerSupport[] @relation("PeerSupportInitiator")
  ReceivedPeerSupports  PeerSupport[] @relation("PeerSupportRecipient")
  SentPeerMessages      PeerMessage[]

  // contact support
  SubmittedSupports      ContactSupport[]    @relation("UserContactSupport")
  SupportResponses       SupportResponse[]   @relation("UserSupportResponse")

// notess
  CounselorNotes  CounselorNote[] @relation("CounselorNotes") // âœ… As counselor writing notes
  UserNotes       CounselorNote[] @relation("UserNotes") 

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model UserProfile {
  id                        Int            @id @default(autoincrement())
  userId                    Int            @unique
  gender                    String?
  birthday                  DateTime?
  country                   String?
  province                  String?
  municipality              String?
  barangay                  String?
  contactNo                 String?
  guardianName              String?
  guardianContact           String?
  userStatus                UserStatus?
  validId                   String?
  selfieImage               String?
  isFirstGenerationStudent   Boolean?       @default(false)
  indigenousGroup            String?
  isSingleParent             Boolean?       @default(false)
  singleParentYears          Int?
  isPWD                      Boolean?       @default(false)
  disability                 String?
  familyIncomeRange          String?
  school                     String?
  course                     String?
  yearLevel                  String?
  sectionBlock               String?
  office                     String?
  jobPosition                String?

  isKycVerified               Boolean? @default(false)

  user                      User            @relation(fields: [userId], references: [id])
  responses                 UserResponse[]  @relation("ProfileToResponses")

  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
}

model CounselorProfile {
  id                    Int       @id @default(autoincrement())
  userId                Int       @unique
  specialization        String?
  licenseNumber         String?
  experienceYears       Int?
  bio                   String?
  availabilitySchedule  String?
  user                  User      @relation(fields: [userId], references: [id])

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model SurveyForm {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  code           String           @unique
  isActive       Boolean          @default(true)
  scoringRules   Json?
  category       Json?
  surveyInternal Int?

  questions      SurveyQuestion[]
  responses      UserResponse[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model SurveyQuestion {
  id               Int              @id @default(autoincrement())
  surveyFormId     Int
  questionName     String
  questionType     String
  options          Json?
  isRequired       Boolean          @default(true)
  orderQuestion    Int?

  surveyForm       SurveyForm       @relation(fields: [surveyFormId], references: [id])
  answers          SurveyAnswer[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([surveyFormId, orderQuestion])
}

model UserResponse {
  id               Int              @id @default(autoincrement())
  userProfileId    Int
  userId           Int              
  surveyFormId     Int
  attemptNumber    Int              @default(1)
  score            Float?
  resultCategory   String?
  status           String           @default("inprogress")
  isReviewed      Boolean           @default(false)
  userProfile      UserProfile      @relation("ProfileToResponses", fields: [userProfileId], references: [id])
  user             User             @relation("UserToResponses", fields: [userId], references: [id])
  surveyForm       SurveyForm       @relation(fields: [surveyFormId], references: [id])
  answers          SurveyAnswer[]

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model SurveyAnswer {
  id               Int              @id @default(autoincrement())
  userResponseId   Int
  surveyQuestionId Int
  value            String?
  numericValue     Float?
  userResponse     UserResponse     @relation(fields: [userResponseId], references: [id])
  surveyQuestion   SurveyQuestion   @relation(fields: [surveyQuestionId], references: [id])

  createdAt        DateTime         @default(now())
}


model ChatSession {
  id          Int          @id @default(autoincrement())
  userId      Int
  counselorId Int?
  isAIChat    Boolean      @default(false)
  topic       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation("UserChatSessions", fields: [userId], references: [id])
  counselor   User?        @relation("CounselorChatSessions", fields: [counselorId], references: [id])
  messages    ChatMessage[]
}

model ChatMessage {
  id           Int         @id @default(autoincrement())
  chatSessionId Int
  senderId     Int?
  content      String @db.Text
  imageUrl     String?
  isFromAI     Boolean     @default(false)
  createdAt    DateTime    @default(now())

  chatSession  ChatSession @relation(fields: [chatSessionId], references: [id])
  sender       User?       @relation("UserMessages", fields: [senderId], references: [id])
}

model Notification {
  id             Int                 @id @default(autoincrement())
  recipientId    Int
  recipient      User                @relation("UserNotifications", fields: [recipientId], references: [id])
  type           NotificationType
  title          String
  message        String
  isRead         Boolean             @default(false)
  createdAt      DateTime            @default(now())
}
// session scheduling
model SessionSchedule {
  id                  Int            @id @default(autoincrement())
  counselorId         Int
  userId              Int
  startAt             DateTime
  endAt               DateTime?
  sessionType         SessionType
  notes               String?
  reminder            ReminderTiming @default(NONE)
  status              SessionStatus  @default(PENDING)
  locationType        LocationType   @default(IN_PERSON)
  locationDetail      String?
  meetingLink         String?
  phoneNumber         String?
  reminderSentAt      DateTime?
  completedNotifiedAt DateTime?

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  counselor           User           @relation("CounselorSchedules", fields: [counselorId], references: [id])
  user                User           @relation("UserSchedules", fields: [userId], references: [id])
}


// awareness campign
enum CampaignType {
  ANNOUNCEMENT
  ARTICLE
  EVENT
  GENERAL
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

model PeerSupport {
  id            Int              @id @default(autoincrement())
  initiatorId   Int
  recipientId   Int
  campaignId    Int?
  isAnonymous   Boolean          @default(false)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  initiator     User             @relation("PeerSupportInitiator", fields: [initiatorId], references: [id])
  recipient     User             @relation("PeerSupportRecipient", fields: [recipientId], references: [id])
  campaign      AwarenessCampaign? @relation(fields: [campaignId], references: [id])
  messages      PeerMessage[]
}

model PeerMessage {
  id             Int         @id @default(autoincrement())
  peerSupportId  Int
  senderId       Int
  message        String?
  imageUrl       String?
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  peerSupport    PeerSupport @relation(fields: [peerSupportId], references: [id])
  sender         User        @relation(fields: [senderId], references: [id])
}


model AwarenessCampaign {
  id            Int             @id @default(autoincrement())
  title         String
  content       String
  type          CampaignType
  status        CampaignStatus  @default(DRAFT)
  isAnonymous Boolean @default(false)
  imageUrl      String?
  startDate     DateTime?
  endDate       DateTime?
  audienceTags  String?
  isPostApproved Boolean @default(false)
  impressions   Int             @default(0)
  createdById   Int
  createdBy     User            @relation("CreatedCampaigns", fields: [createdById], references: [id])
  comments      Comment[]
  feedbacks     Feedback[]
   peerSupports   PeerSupport[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  imageUrl   String?
  userId     Int
  campaignId Int
  user       User           @relation(fields: [userId], references: [id])
  campaign   AwarenessCampaign @relation(fields: [campaignId], references: [id])
  createdAt  DateTime       @default(now())
}

model Feedback {
  id         Int       @id @default(autoincrement())
  userId     Int
  campaignId Int
  context    String?
  rating     Int?
  sentiment  Sentiment?
  message    String
  imageUrl   String?
  user       User              @relation(fields: [userId], references: [id])
  campaign   AwarenessCampaign @relation(fields: [campaignId], references: [id])
  createdAt  DateTime          @default(now())
}


model Referral {
  id               Int             @id @default(autoincrement())
  userId           Int
  counselorId      Int?             
  referrerId       Int              

  concern          String
  shortDescription String
  priority         Priority
  recipient        String
  summaryNotes     String?
  status           ReferralStatus   @default(SENT)
  acknowledgeStatus Boolean          @default(false)

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user        User  @relation("UserReferral", fields: [userId], references: [id])
  counselor   User? @relation("CounselorReferral", fields: [counselorId], references: [id]) // âœ… optional
  referrer    User  @relation("ReferrerReferral", fields: [referrerId], references: [id])   // âœ… required
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReferralStatus {
  SENT
  ACCEPTED
  COMPLETED
  REJECTED
  PENDING
}

model Content {
  id            Int       @id @default(autoincrement())
  title         String
  type          ContentType
  description   String?
  category      String?
  targetAudience TargetAudience
  content       String?
  videoUrl      String?
  uploadedById  Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ratings ContentRating[] @relation("ContentRatings")
  uploadedBy    User      @relation("UploadedContents", fields: [uploadedById], references: [id])
}

model ContentRating {
  id          Int      @id @default(autoincrement())
  contentId   Int
  userId      Int
  rating      Int      @db.SmallInt
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  content Content @relation(fields: [contentId], references: [id], name: "ContentRatings")
  user    User    @relation(fields: [userId], references: [id], name: "UserRatings")

  @@unique([contentId, userId])
}

enum ContentType {
  GUIDE
  COURSE
  RESOURCE
}

enum TargetAudience {
  GENERAL
  ADULTS
  TEENS
  CHILDREN
}


model GuidedTLCPlan {
  id             Int               @id @default(autoincrement())
  userId         Int
  user           User              @relation(fields: [userId], references: [id])
  title          String
  goal           String
  notes          String?
  durationDays   Int
  isCompleted    Boolean           @default(false)
  certificateMsg String? @db.Text
  certificateAt  DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  days           GuidedTLCDay[]
}

model GuidedTLCDay {
  id           Int           @id @default(autoincrement())
  planId       Int
  dayNumber    Int
  instructions String        @db.Text
  tasks        Json
  isCompleted  Boolean       @default(false)
  completedAt  DateTime?
  plan         GuidedTLCPlan @relation(fields: [planId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model ContactSupport {
  id           Int              @id @default(autoincrement())
  userId       Int
  subject      String
  message      String
  imageUrl     String?
  status       SupportStatus    @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation("UserContactSupport", fields: [userId], references: [id])

  responses    SupportResponse[]
}

model SupportResponse {
  id               Int             @id @default(autoincrement())
  contactSupportId Int
  responderId      Int
  message          String
  imageUrl         String?
  createdAt        DateTime        @default(now())

  contactSupport   ContactSupport  @relation(fields: [contactSupportId], references: [id])
  responder        User            @relation("UserSupportResponse", fields: [responderId], references: [id])
}

enum SupportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum NoteType {
  SESSION_NOTE
  OBSERVATION
  ASSESSMENT
  INTERVENTION
}

enum MoodType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model CounselorNote {
  id           Int        @id @default(autoincrement())
  userId       Int
  counselorId  Int
  noteType     NoteType
  mood         MoodType
  riskLevel    RiskLevel
  content      String     @db.Text
  tags         String?    // Comma-separated tags
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation("UserNotes", fields: [userId], references: [id])
  counselor    User       @relation("CounselorNotes", fields: [counselorId], references: [id])
}
